lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~ . + BA * (.) + Var * (.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  NHW + ftcd_score + NMR + cpd_ps + BA*(.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  . + BA * (.) + Var * (.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  NHW + ftcd_score + NMR + cpd_ps + BA*(.) + Var * (.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  NHW + ftcd_score + NMR + cpd_ps + BA*(.) + Var * (NHW + ftcd_score + NMR + cpd_ps),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  BA*(NHW + ftcd_score + NMR + cpd_ps) + Var * (NHW + ftcd_score + NMR + cpd_ps),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~  . + BA*(NHW + ftcd_score + NMR + cpd_ps) + Var * (NHW + ftcd_score + NMR + cpd_ps),
data=train, family=binomial()),
trace=0)
#| label: fig-roc_train
#| fig-cap: ROC Curves of Models on Training Data
# calculate ROC for the lasso model
roc.lasso <- roc(Y.train,
lasso %>%
predict(X.train, type="response") %>%
as.vector)
# calculate ROC for the ridge model
roc.ridge <- roc(Y.train,
ridge %>%
predict(X.train, type="response") %>%
as.vector)
# calculate ROC for the logit model
roc.logit <- roc(Y.train,
logit %>%
predict(train, type="response"))
# plot ROC curve and combine them
plot.roc(roc.lasso, print.auc=T,
col="red", lwd=2,
main="ROC curves of models on training data")
plot.roc(roc.ridge, print.auc=T,
col="blue", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.4)
plot.roc(roc.logit, print.auc=T,
col="black", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.3)
legend("topright",
legend=c("lasso", "ridge", "logit"),
col=c("red", "blue", "black"),
lty=1)
#| label: fig-roc_test
#| fig-cap: ROC Curves of Models on Testing data
# create test dataset
X.test <- model.matrix(abst ~ . + BA * (.) + Var * (.),
data=test)
Y.test <- test$abst
# calculate ROC
roc.lasso <- roc(Y.test,
lasso %>%
predict(X.test, type="response") %>%
as.vector)
roc.ridge <- roc(Y.test,
ridge %>%
predict(X.test, type="response") %>%
as.vector)
roc.logit <- roc(Y.test,
logit %>%
predict(test, type="response"))
# plot ROC for all models
plot.roc(roc.lasso, print.auc=T,
col="red", lwd=2,
main="ROC curves of models on testing data")
plot.roc(roc.ridge, print.auc=T,
col="blue", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.4)
plot.roc(roc.logit, print.auc=T,
col="black", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.3)
legend("topright",
legend=c("lasso", "ridge", "logit"),
col=c("red", "blue", "black"),
lty=1)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~ BA*(.) + Var * (.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.min
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~ BA*(.),
data=train, family=binomial()),
trace=0)
# extract the optimal lambda value for the Lasso model
lambda.lasso <- cv.lasso$lambda.1se
lasso <- glmnet(X.train, Y.train, alpha=1,
family="binomial",
lambda=lambda.lasso)
# extract the optimal lambda value for the ridge model
lambda.ridge <- cv.ridge$lambda.1se
ridge <- glmnet(X.train, Y.train, alpha=0,
family="binomial",
lambda=lambda.ridge)
# fit a logistic regression model using stepwise selection
logit <- step(glm(abst ~ BA*(.),
data=train, family=binomial()),
trace=0)
#| label: fig-roc_train
#| fig-cap: ROC Curves of Models on Training Data
# calculate ROC for the lasso model
roc.lasso <- roc(Y.train,
lasso %>%
predict(X.train, type="response") %>%
as.vector)
# calculate ROC for the ridge model
roc.ridge <- roc(Y.train,
ridge %>%
predict(X.train, type="response") %>%
as.vector)
# calculate ROC for the logit model
roc.logit <- roc(Y.train,
logit %>%
predict(train, type="response"))
# plot ROC curve and combine them
plot.roc(roc.lasso, print.auc=T,
col="red", lwd=2,
main="ROC curves of models on training data")
plot.roc(roc.ridge, print.auc=T,
col="blue", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.4)
plot.roc(roc.logit, print.auc=T,
col="black", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.3)
legend("topright",
legend=c("lasso", "ridge", "logit"),
col=c("red", "blue", "black"),
lty=1)
#| label: fig-roc_test
#| fig-cap: ROC Curves of Models on Testing data
# create test dataset
X.test <- model.matrix(abst ~ . + BA * (.) + Var * (.),
data=test)
Y.test <- test$abst
# calculate ROC
roc.lasso <- roc(Y.test,
lasso %>%
predict(X.test, type="response") %>%
as.vector)
roc.ridge <- roc(Y.test,
ridge %>%
predict(X.test, type="response") %>%
as.vector)
roc.logit <- roc(Y.test,
logit %>%
predict(test, type="response"))
# plot ROC for all models
plot.roc(roc.lasso, print.auc=T,
col="red", lwd=2,
main="ROC curves of models on testing data")
plot.roc(roc.ridge, print.auc=T,
col="blue", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.4)
plot.roc(roc.logit, print.auc=T,
col="black", lwd=2, add=T,
print.auc.x=0.5,
print.auc.y=0.3)
legend("topright",
legend=c("lasso", "ridge", "logit"),
col=c("red", "blue", "black"),
lty=1)
logit <- step(glm(abst ~ abst ~ . + BA * (.) + Var * (.),
data=df_imp, family=binomial()),
trace=0)
#| label: tbl-coef_lasso
#| tbl-cap: Coefficients of Selected Variables in Lasso regression
# create the design matrix using all predictors and interactions
X <- model.matrix(abst ~ . + BA * (.) + Var * (.),
data=df_imp)
Y <- df_imp$abst
mdl.lasso <- cv.glmnet(X, Y, alpha=1,
family="binomial",
type.measure="auc")
# extract the coefficients
coef.lasso <- coef(mdl.lasso, s="lambda.1se") %>% as.matrix
# rename the intercept term to "Intercept" for clarity
rownames(coef.lasso)[rownames(coef.lasso) == "(Intercept)"] <- "Intercept"
# create a data frame containing only non-zero coefficients
data.frame(Predictor=rownames(coef.lasso)[which(coef.lasso!=0)],
Coefficient=coef.lasso[coef.lasso!=0]) %>%
mutate_if(is.numeric, round, digits = 3) %>%
kable() %>%
kable_styling(full_width=F, position="center")
logit <- step(glm(abst ~ abst ~ . + BA * (.) + Var * (.),
data=df_imp, family=binomial()),
trace=0)
logit <- step(glm(abst ~ . + BA * (.) + Var * (.),
data=df_imp, family=binomial()),
trace=0)
logit <- step(glm(abst ~ . + BA * (.),
data=df_imp, family=binomial()),
trace=0)
logit <- step(glm(abst ~ BA * (.),
data=df_imp, family=binomial()),
trace=0)
#| label: tbl-coef_logit
#| tbl-cap: Coefficients of Selected Variables in Logistic regression
# extract coefficients
coef.logit <- summary(logit)$coefficients
colnames(coef.logit) <- c("Estimate", "SE", "Z value", "p value")
# remove the first row (Intercept) and format the output
coef.logit[-1, ] %>%
as.data.frame() %>%
mutate_if(is.numeric, round, digits = 5) %>% # round numeric values to 5 decimal places
mutate(`p value`=case_when(
`p value` < 0.01 ~ paste0(as.character(`p value`), "**"), # add '**' for p-values < 0.01
`p value` < 0.05 ~ paste0(as.character(`p value`), "*"),  # add '*' for p-values < 0.05
TRUE ~ as.character(`p value`))) %>%
kable() %>%
kable_styling(full_width=F, position="center")
logit <- step(glm(abst ~ Var * (.),
data=df_imp, family=binomial()),
trace=0)
logit <- step(glm(abst ~ BA * (.),
data=df_imp, family=binomial()),
trace=0)
#| label: fig-plt_int_lasso
#| fig-cap: Smoking Abstinence by Pharmacotherapy and NMR
# create a jitter plot to reduce overlap
plt_cont <- df_imp %>%
ggplot(aes(x = NMR, y = abst, color = Var)) +
geom_jitter(width = 0.2, height = 0.2, size = 3, alpha = 0.7) +
labs(
title = "Smoking Abstinence by Pharmacotherapy and NMR",
x = "NMR",
y = "Smoking Abstinence",
color = "Pharmacotherapy"
) +
scale_y_discrete(labels = c("0"="No", "1"="Yes")) + # Change y-axis labels
# blue for no pharmacotherapy and red for pharmacotherapy
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
# create a bar plot showing the proportion of abstinence
plt_disc <- df_imp %>%
# NMR is categorized into two groups (<= 0.75 and > 0.75)
mutate(NMR=cut(NMR, breaks = c(-Inf, 0.75, Inf),
labels = c("NMR <= 0.75", "NMR > 0.75"))) %>%
group_by(NMR, Var) %>%
summarise(Resp = sum(abst=="1") / n()) %>%
ggplot(aes(x = NMR, fill = factor(Var))) + # Convert Var to factor
geom_bar(aes(y = Resp), stat = "identity",
position = "dodge", width = 0.5, alpha=0.7) +
labs(
title = "Response Proportion by NMR and Pharmacotherapy",
x = "NMR",
y = "Proportion of Abstinence",
fill = "Pharmacotherapy"
) +
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
plt_cont / plt_disc
#| label: fig-plt_int_lasso
#| fig-cap: Smoking Abstinence by Pharmacotherapy and NMR
# create a jitter plot to reduce overlap
plt_cont <- df_imp %>%
ggplot(aes(x = NMR, y = abst, color = Var)) +
geom_jitter(width = 0.2, height = 0.2, size = 3, alpha = 0.7) +
labs(
title = "Smoking Abstinence by Pharmacotherapy and NMR",
x = "NMR",
y = "Smoking Abstinence",
color = "Pharmacotherapy"
) +
scale_y_discrete(labels = c("0"="No", "1"="Yes")) + # Change y-axis labels
# blue for no pharmacotherapy and red for pharmacotherapy
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
# create a bar plot showing the proportion of abstinence
plt_disc <- df_imp %>%
# NMR is categorized into two groups (<= 0.75 and > 0.75)
mutate(NMR=cut(NMR, breaks = c(-Inf, 0.75, Inf),
labels = c("NMR <= 0.75", "NMR > 0.75"))) %>%
group_by(NMR, Var) %>%
summarise(Resp = sum(abst=="1") / n()) %>%
ggplot(aes(x = NMR, fill = factor(Var))) + # Convert Var to factor
geom_bar(aes(y = Resp), stat = "identity",
position = "dodge", width = 0.5, alpha=0.7) +
labs(
title = "Response Proportion by NMR and Pharmacotherapy",
x = "NMR",
y = "Proportion of Abstinence",
fill = "Pharmacotherapy"
) +
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
plt_cont / plt_disc + plot_layout(guides = "collect")
#| label: fig-plt_int_lasso
#| fig-cap: Smoking Abstinence by Pharmacotherapy and NMR
# create a jitter plot to reduce overlap
plt_cont <- df_imp %>%
ggplot(aes(x = NMR, y = abst, color = Var)) +
geom_jitter(width = 0.2, height = 0.2, size = 3, alpha = 0.7) +
labs(
title = "Smoking Abstinence by Pharmacotherapy and NMR",
x = "NMR",
y = "Smoking Abstinence",
color = "Pharmacotherapy"
) +
scale_y_discrete(labels = c("0"="No", "1"="Yes")) + # Change y-axis labels
# blue for no pharmacotherapy and red for pharmacotherapy
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
# create a bar plot showing the proportion of abstinence
plt_disc <- df_imp %>%
# NMR is categorized into two groups (<= 0.75 and > 0.75)
mutate(NMR=cut(NMR, breaks = c(-Inf, 0.75, Inf),
labels = c("NMR <= 0.75", "NMR > 0.75"))) %>%
group_by(NMR, Var) %>%
summarise(Resp = sum(abst=="1") / n()) %>%
ggplot(aes(x = NMR, fill = factor(Var))) + # Convert Var to factor
geom_bar(aes(y = Resp), stat = "identity",
position = "dodge", width = 0.5, alpha=0.7) +
labs(
title = "Response Proportion by NMR and Pharmacotherapy",
x = "NMR",
y = "Proportion of Abstinence",
fill = "Pharmacotherapy"
) +
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("No", "Yes")) +
theme_minimal()
plt_cont / plt_disc + plot_layout(guides = "collect")
#| label: fig-plt_int_lasso
#| fig-cap: Smoking Abstinence by Pharmacotherapy and NMR
# create a jitter plot to reduce overlap
plt_cont <- df_imp %>%
ggplot(aes(x = NMR, y = abst, color = Var)) +
geom_jitter(width = 0.2, height = 0.2, size = 3, alpha = 0.7) +
labs(
title = "Smoking Abstinence by Pharmacotherapy and NMR",
x = "NMR",
y = "Smoking Abstinence",
color = "Pharmacotherapy"
) +
scale_y_discrete(labels = c("0"="No", "1"="Yes")) + # Change y-axis labels
# blue for no pharmacotherapy and red for pharmacotherapy
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
# create a bar plot showing the proportion of abstinence
plt_disc <- df_imp %>%
# NMR is categorized into two groups (<= 0.75 and > 0.75)
mutate(NMR=cut(NMR, breaks = c(-Inf, 0.75, Inf),
labels = c("NMR <= 0.75", "NMR > 0.75"))) %>%
group_by(NMR, Var) %>%
summarise(Resp = sum(abst=="1") / n()) %>%
ggplot(aes(x = NMR, fill = factor(Var))) + # Convert Var to factor
geom_bar(aes(y = Resp), stat = "identity",
position = "dodge", width = 0.5, alpha=0.7) +
labs(
title = "Response Proportion by NMR and Pharmacotherapy",
x = "NMR",
y = "Proportion of Abstinence",
fill = "Pharmacotherapy"
) +
scale_fill_manual(values=c("0"="blue", "1"="red"),
labels = c("No", "Yes")) +
theme_minimal()
plt_cont / plt_disc + plot_layout(guides = "collect")
#| label: fig-plt_int_lasso
#| fig-cap: Smoking Abstinence by Pharmacotherapy and NMR
# create a jitter plot to reduce overlap
plt_cont <- df_imp %>%
ggplot(aes(x = NMR, y = abst, color = Var)) +
geom_jitter(width = 0.2, height = 0.2, size = 3, alpha = 0.7) +
labs(
title = "Smoking Abstinence by Pharmacotherapy and NMR",
x = "NMR",
y = "Smoking Abstinence",
color = "Pharmacotherapy"
) +
scale_y_discrete(labels = c("0"="No", "1"="Yes")) + # Change y-axis labels
# blue for no pharmacotherapy and red for pharmacotherapy
scale_color_manual(values=c("0"="blue", "1"="red"),
labels = c("0"="No", "1"="Yes")) +
theme_minimal()
# create a bar plot showing the proportion of abstinence
plt_disc <- df_imp %>%
# NMR is categorized into two groups (<= 0.75 and > 0.75)
mutate(NMR=cut(NMR, breaks = c(-Inf, 0.75, Inf),
labels = c("NMR <= 0.75", "NMR > 0.75"))) %>%
group_by(NMR, Var) %>%
summarise(Resp = sum(abst=="1") / n()) %>%
ggplot(aes(x = NMR, fill = factor(Var))) + # Convert Var to factor
geom_bar(aes(y = Resp), stat = "identity",
position = "dodge", width = 0.5, alpha=0.7) +
labs(
title = "Response Proportion by NMR and Pharmacotherapy",
x = "NMR",
y = "Proportion of Abstinence",
fill = "Pharmacotherapy"
) +
scale_fill_manual(values=c("0"="blue", "1"="red"),
labels = c("No", "Yes")) +
theme(legend.position = "none")
theme_minimal()
plt_cont / plt_disc + plot_layout(guides = "collect")
